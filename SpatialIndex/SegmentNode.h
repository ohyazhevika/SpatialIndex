#pragma once
#include "Segment.h"
#include <set>

struct SegmentNode {
public:

	Segment range;						// ????????? ???????
	std::set<Segment> associatedSet;	// ??????????????? ?????? (?????? ?????????, ?????????? ? ???? ?????? ????????? ???????)

	int height;							// ?????? ????????? ? ?????? ? ?????? ????
	SegmentNode* rLink;					// ????????? ?? ??????? ????
	SegmentNode* lLink;					// ????????? ?? ?????? ????
	bool isRThread;						// 1, ???? rLink ???????? ??????? ?? ?????? ????????
	bool isLThread;						// 1, ???? lLink ???????? ??????? ?? ????? ???????? ????

	SegmentNode(Segment range);

	static SegmentNode* leftDummy;
	static SegmentNode* rightDummy;
	static SegmentNode* deletableTail;
	static Segment tailSuccesorRange;

	static void Insert(SegmentNode*& root, Segment range);

	static SegmentNode* Insert(SegmentNode* root, Segment range, std::set<Segment>& segmentaIds);

	static SegmentNode* rem(SegmentNode* p, const Segment& segment, bool leftSon);

	static SegmentNode* remove(SegmentNode* p, Segment range, bool leftSon = false);

	static SegmentNode* inorderSuccessor(SegmentNode* p);

	static SegmentNode* inorderPredecessor(SegmentNode* p);

	static int getHeight(const SegmentNode* node);

	static SegmentNode* getOverlappingNodeForPoint(SegmentNode* root, const double point);

public:

	static int balanceFactor(const SegmentNode* node);

	static void fixHeight(SegmentNode* node);

	static SegmentNode* rotateright(SegmentNode* p);

	static SegmentNode* rotateleft(SegmentNode* q);

	static SegmentNode* balance(SegmentNode* p);

	static SegmentNode* findMin(SegmentNode* p);


	static SegmentNode* removeMin(SegmentNode* p);

	static SegmentNode* findMax(SegmentNode* p);

	static SegmentNode* removeMax(SegmentNode* p);
};